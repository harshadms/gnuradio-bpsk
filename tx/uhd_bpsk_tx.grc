options:
  parameters:
    author: harshad
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: uhd_bpsk_tx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Const_HDR
  id: variable_constellation
  parameters:
    comment: ''
    const_points: digital.psk_2()[0]
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    npwr: '1.0'
    precision: '8'
    rot_sym: '2'
    soft_dec_lut: '''auto'''
    sym_map: digital.psk_2()[1]
    type: calcdist
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 540.0]
    rotation: 0
    state: enabled
- name: Const_PLD
  id: variable_constellation
  parameters:
    comment: ''
    const_points: digital.psk_2()[0]
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    npwr: '1.0'
    precision: '8'
    rot_sym: '2'
    soft_dec_lut: '''auto'''
    sym_map: digital.psk_2()[1]
    type: calcdist
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 540.0]
    rotation: 0
    state: enabled
- name: eb
  id: variable
  parameters:
    comment: ''
    value: '0.6'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 532.0]
    rotation: 0
    state: enabled
- name: enc
  id: variable_cc_encoder_def
  parameters:
    comment: ''
    dim1: '1'
    dim2: '1'
    framebits: '8000'
    k: k
    mode: fec.CC_TERMINATED
    ndim: '0'
    padding: 'False'
    polys: polys
    rate: rate
    state_start: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1608, 540.0]
    rotation: 0
    state: enabled
- name: enc_hdr
  id: variable_repetition_encoder_def
  parameters:
    comment: ''
    dim1: '1'
    dim2: '1'
    framebits: '128'
    ndim: '0'
    rep: rep
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1808, 620.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable
  parameters:
    comment: ''
    value: '915'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 532.0]
    rotation: 0
    state: enabled
- name: hdr_format
  id: variable
  parameters:
    comment: ''
    value: digital.header_format_counter(digital.packet_utils.default_access_code,
      3, Const_PLD.bits_per_symbol())
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 628.0]
    rotation: 0
    state: enabled
- name: k
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 532.0]
    rotation: 0
    state: enabled
- name: nfilts
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 532.0]
    rotation: 0
    state: enabled
- name: pad_end
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 596.0]
    rotation: 0
    state: enabled
- name: pad_start
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 596.0]
    rotation: 0
    state: enabled
- name: polys
  id: variable
  parameters:
    comment: ''
    value: '[109, 79]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 596.0]
    rotation: 0
    state: enabled
- name: rate
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 596.0]
    rotation: 0
    state: enabled
- name: rep
  id: variable
  parameters:
    comment: ''
    value: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 660.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '500000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: samp_rate_0
  id: variable
  parameters:
    comment: ''
    value: 0.5e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 532.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 532.0]
    rotation: 0
    state: enabled
- name: taps
  id: variable
  parameters:
    comment: ''
    value: firdes.root_raised_cosine(1.0,samp_rate,samp_rate/sps,eb,11*sps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 676.0]
    rotation: 0
    state: enabled
- name: tx_gain
  id: variable
  parameters:
    comment: ''
    value: '50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 596.0]
    rotation: 0
    state: enabled
- name: tx_rrc_taps
  id: variable_rrc_filter_taps
  parameters:
    alpha: eb
    comment: ''
    gain: nfilts
    ntaps: 11*sps*nfilts
    samp_rate: nfilts
    sym_rate: '1.0'
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 564.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '5'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 348.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport pmt\nimport numpy\
      \ as np\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, verbose=False,\
      \ addr=1):  # only default arguments here\n        \"\"\"arguments to this function\
      \ show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n    \
      \        self,\n            name='Py Message Parser',   # will show up in GRC\n\
      \            in_sig=None,\n            out_sig=None\n        )\n        self.data_in\
      \ = \"data_in\"\n        self.cmd_in = \"cmd_in\"\n        self.addr = addr\n\
      \n        self.message_port_register_in(pmt.intern(self.cmd_in ))\n        self.message_port_register_in(pmt.intern(self.data_in\
      \ ))\n\n        self.set_msg_handler(pmt.intern(self.data_in), self.handle_data)\n\
      \        self.set_msg_handler(pmt.intern(self.cmd_in), self.handle_cmd)\n\n\
      \        self.verbose = verbose\n        # if an attribute with the same name\
      \ as a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.cnt = 0\n\n    def handle_data(self, msg):\n        a\
      \ = pmt.to_python(msg)\n\n        chars = a[1]\n        addr = chars[:2]\n\n\
      \        addr = 256*addr[0]+addr[1]\n\n        if addr == self.addr:\n     \
      \       return\n        \n        string_ = []\n        for i in chars[2:]:\n\
      \            if i == 35:\n                if self.verbose:\n               \
      \     print (chars)\n                    string_.append(\"<ETX>\")\n\n     \
      \           break\n            \n            string_.append(chr(i))\n      \
      \  \n        string_ = ''.join(string_)\n\n        # if \"Testing\" in string_:\n\
      \        self.cnt = self.cnt + 1\n\n        # if not self.verbose:\n       \
      \ #     string_ = string_.split(\"<ETX>\")[0]\n        \n        print (f\"\
      Rx message from {addr}: {a[1]}\")\n    \n    def handle_cmd(self, msg):\n  \
      \      msg = pmt.to_python(msg)\n\n    def handle_cmd(self, msg):\n        msg\
      \ = pmt.to_python(msg)\n        \n        try:\n            cmd = msg[1][0]\n\
      \            test = int(msg[1][1])\n        except:\n            return\n\n\
      \        if cmd == 1:\n            print (\"Count = %d/%d\" % (self.cnt, test))\n\
      \            self.cnt = 0\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        pass\n"
    addr: '1'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    verbose: 'False'
  states:
    _io_cache: ('Py Message Parser', 'blk', [('verbose', 'False'), ('addr', '1')],
      [('data_in', 'message', 1), ('cmd_in', 'message', 1)], [], 'Embedded Python
      Block example - a simple multiply const', ['addr', 'verbose'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 424.0]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport pmt\nimport numpy\
      \ as np\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, delay=10):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Add TX Time Tag',   # will show up in GRC\n   \
      \         in_sig=[np.complex64],\n            out_sig=[np.complex64]\n     \
      \   )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.usrp\
      \ = None\n        self.sample_count = 0\n\n        self.tx_time_out = \"tx_time_out\"\
      \n        self.reset = \"reset\"\n\n        self.message_port_register_out(pmt.intern(self.tx_time_out\
      \ ))\n        self.message_port_register_in(pmt.intern(self.reset ))\n\n   \
      \     self.set_msg_handler(pmt.intern(self.reset), self.handle_rst_msg)\n\n\
      \        self.delay = delay \n\n        self.tx_secs = 0\n        self.tx_fracs\
      \ = 0\n        self.call = 0\n        self.set_eob = False\n        self.set_tag_propagation_policy(gr.TPP_DONT)\n\
      \        self.tx_time_set = False\n\n    def handle_rst_msg(self, msg):\n  \
      \      reset_msg = pmt.to_python(msg)\n        #print (reset_msg)\n\n      \
      \  if self.tx_time_set and reset_msg[1] and reset_msg[0] == 'reset':\n     \
      \       self.tx_time_set = False\n            #print (self.tx_time_set)\n\n\
      \    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        time = self.usrp.get_time_now()\n\n        output_items[0][:]\
      \ = input_items[0]\n        self.call = self.call + 1\n\n        #print (f\"\
      Call: {self.call}\")\n\n        tagTuple = self.get_tags_in_window(0, 0, len(input_items[0]))\n\
      \n        if not self.tx_time_set:\n            self.tx_secs = int(time.get_real_secs())+self.delay\n\
      \            self.tx_fracs = time.get_real_secs() - int(time.get_real_secs())\n\
      \            self.tx_time_set = True\n            \n            for tag in tagTuple:\n\
      \                if pmt.to_python(tag.key) == \"packet_len\":\n            \
      \        self.add_item_tag(0, tag.offset, pmt.intern('tx_time'), pmt.to_pmt((self.tx_secs,\
      \ self.tx_fracs)))\n                    self.add_item_tag(0, tag.offset, pmt.intern('tx_sob'),\
      \ pmt.PMT_T)\n                    #self.add_item_tag(0, 0, pmt.intern('packet_len'),\
      \ tag.value)\n                    self.packet_length = pmt.to_python(tag.value)\n\
      \                    self.consumed_packets = 0\n                    self.set_eob\
      \ = True\n                    \n                    break\n\n        if self.set_eob:\n\
      \            #print (self.consumed_packets, len(output_items[0]), self.sample_count\
      \ + (self.packet_length - self.consumed_packets), self.packet_length)\n    \
      \        if (self.consumed_packets + len(output_items[0])) >= self.packet_length:\n\
      \                self.add_item_tag(0, self.sample_count, pmt.intern('tx_eob'),\
      \ pmt.PMT_T)\n                self.set_eob = False\n\n            self.consumed_packets\
      \ = self.consumed_packets + len(output_items[0])\n\n        pmt_msg = pmt.to_pmt(('tx_time',\
      \ self.tx_secs+self.tx_fracs))\n        self.message_port_pub(pmt.intern(self.tx_time_out\
      \ ), pmt_msg)\n        # if self.packet_length < self.consumed_packets and self.set_eob:\n\
      \        #     self.add_item_tag(0, self.sample_count+self.packet_length, pmt.intern('tx_eob'),\
      \ pmt.PMT_T)\n        #     self.set_eob = False 3856 \n        # else:\n  \
      \      #     self.consumed_packets = self.consumed_packets + len(output_items[0])\n\
      \n        # Add EOB at the end of buffer\n            \n            \n\n   \
      \    # print (\"Key: \" + pmt.to_python(tag.key) + \" \" + str(tag.offset) +\
      \ \" \" + str(tag.value))\n\n        # tagTuple = self.get_tags_in_window(0,\
      \ 0, len(input_items[0]))\n\n        # for tag in tagTuple:\n        #     print\
      \ (\"Key: \" + pmt.to_python(tag.key) + \" \" + str(tag.offset) + \" \" + str(tag.value))\n\
      \n        self.sample_count = self.sample_count + len(output_items[0])\n   \
      \     return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    delay: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Add TX Time Tag', 'blk', [('delay', '10')], [('0', 'complex', 1),
      ('reset', 'message', 1)], [('0', 'complex', 1), ('tx_time_out', 'message', 1)],
      'Embedded Python Block example - a simple multiply const', ['delay'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 352.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 556.0]
    rotation: 0
    state: enabled
- name: packet_tx_0
  id: packet_tx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    hdr_const: Const_HDR
    hdr_enc: enc_hdr
    hdr_format: hdr_format
    maxoutbuf: '0'
    minoutbuf: '0'
    pad_end: pad_end
    pad_start: pad_start
    pld_const: Const_PLD
    pld_enc: enc
    psf_taps: tx_rrc_taps
    sps: sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 332.0]
    rotation: 0
    state: enabled
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: 'self.epy_block_1.usrp = self.uhd_usrp_sink_0

      self.uhd_usrp_sink_0.set_time_next_pps(uhd.time_spec(0.0))'
    comment: ''
    priority: '0'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 236.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: freq * 1e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: '"serial=31EABEA, underflow_policy=next_packet"'
    gain0: tx_gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: ''
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 292.0]
    rotation: 0
    state: enabled
- name: zeromq_pull_msg_source_0
  id: zeromq_pull_msg_source
  parameters:
    address: tcp://127.0.0.1:1234
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 388.0]
    rotation: 0
    state: enabled
- name: zeromq_pull_msg_source_0_0
  id: zeromq_pull_msg_source
  parameters:
    address: tcp://127.0.0.1:1237
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 420.0]
    rotation: 0
    state: enabled

connections:
- [blocks_multiply_const_vxx_0, '0', epy_block_1, '0']
- [epy_block_1, '0', uhd_usrp_sink_0, '0']
- [packet_tx_0, '0', blocks_multiply_const_vxx_0, '0']
- [zeromq_pull_msg_source_0, out, packet_tx_0, in]
- [zeromq_pull_msg_source_0_0, out, epy_block_1, reset]

metadata:
  file_format: 1
  grc_version: gfe42f6a4a
